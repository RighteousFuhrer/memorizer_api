// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum NoteType {
  kanji
  word
  paragraph
}

model Note {
  id   Int      @id @default(autoincrement())
  type NoteType

  Topic   Topic? @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId Int?

  kanji     Kanji?
  word      Word?
  paragraph Paragraph?
}

model Kanji {
  note   Note    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId Int     @id
  link   String?
  symbol String

  translations KanjiTranslation[]
  forms        KanjiForm[]
  examples     KanjiExample[]
}

model KanjiTranslation {
  id          Int    @id @default(autoincrement())
  translation String

  noteId Int
  note   Kanji @relation(fields: [noteId], references: [noteId], onDelete: Cascade)
}

model KanjiForm {
  id   Int    @id @default(autoincrement())
  form String

  noteId Int
  note   Kanji @relation(fields: [noteId], references: [noteId], onDelete: Cascade)
}

model KanjiExample {
  id      Int    @id @default(autoincrement())
  example String

  noteId Int
  note   Kanji @relation(fields: [noteId], references: [noteId], onDelete: Cascade)
}

model Word {
  note   Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId Int  @id

  katakana String
  hirogana String
  romanji  String
  kanji    String?

  translation WordTranslation[]
}

model WordTranslation {
  id          Int    @id @default(autoincrement())
  translation String

  noteId Int
  note   Word @relation(fields: [noteId], references: [noteId], onDelete: Cascade)
}

model Paragraph {
  note   Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId Int  @id

  title String
  text  String
  link  String
}

model Topic {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.VarChar(600)
  createdAt   DateTime @default(now())

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  notes       Note[]
  questions   Question[]
  examPresets ExamPreset[]
}

model Subject {
  id     Int     @id @default(autoincrement())
  title  String
  topics Topic[]
}

enum QestionType {
  select
  text
  image
}

model Question {
  id       Int         @id @default(autoincrement())
  question String
  active   Boolean     @default(true)
  type     QestionType

  topicId Int
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  questionText   QuestionText?
  questionOption QuestionSelect?
  questionImage  QuestionImage?
  Answer         Answer[]
}

model QuestionSelect {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int      @id
  options    Option[]
}

model Option {
  id             Int            @id @default(autoincrement())
  text           String
  correct        Boolean        @default(false)
  questionOption QuestionSelect @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId     Int

  selected OptionSelected[]
}

enum AnswerType {
  Text
  Code
}

model QuestionText {
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int        @id
  text       String
  answerType AnswerType @default(Text)
}

model QuestionImage {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int      @id
  image      Bytes
}

model ExamPreset {
  id   Int    @id @default(autoincrement())
  name String @unique

  examResult ExamResult[]
  topics     Topic[]
}

enum Correctness {
  correct
  false
  partially
}

model Answer {
  id      Int         @id @default(autoincrement())
  correct Correctness @default(false)

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int

  examResult   ExamResult @relation(fields: [examResultId], references: [id], onDelete: Cascade)
  examResultId Int

  text     AnswerText?
  image    AnswerImage?
  selected AnswerSelect?
}

model AnswerText {
  answerId Int    @id
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  text String
}

model AnswerImage {
  answerId Int    @id
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  image Bytes
}

model AnswerSelect {
  answerId Int    @id
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  options OptionSelected[]
}

model OptionSelected {
  id Int @id @default(autoincrement())

  answerId Int
  answer   AnswerSelect @relation(fields: [answerId], references: [answerId], onDelete: Cascade)

  optionId Int
  option   Option @relation(fields: [optionId], references: [id])
}

model ExamResult {
  id   Int      @id @default(autoincrement())
  mark Float    @default(0.0)
  date DateTime @default(now())

  examPreset   ExamPreset @relation(fields: [examPresetId], references: [id])
  examPresetId Int

  answers Answer[]
}
